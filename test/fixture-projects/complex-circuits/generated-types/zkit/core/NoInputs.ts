/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */

import { CircuitZKit, CircuitZKitConfig, Groth16Proof, NumberLike, NumericString, PublicSignals } from "@solarity/zkit";

export type PrivateNoInputs = {};

export type PublicNoInputs = {
  c: NumericString;
};

export type ProofNoInputs = {
  proof: Groth16Proof;
  publicSignals: PublicNoInputs;
};

export type Calldata = [
  [NumericString, NumericString],
  [[NumericString, NumericString], [NumericString, NumericString]],
  [NumericString, NumericString],
  [NumericString],
];

export class NoInputs extends CircuitZKit {
  constructor(config: CircuitZKitConfig) {
    super(config);
  }

  public async generateProof(inputs: PrivateNoInputs): Promise<ProofNoInputs> {
    const proof = await super.generateProof(inputs as any);

    return {
      proof: proof.proof,
      publicSignals: this._normalizePublicSignals(proof.publicSignals),
    };
  }

  public async verifyProof(proof: ProofNoInputs): Promise<boolean> {
    return await super.verifyProof({
      proof: proof.proof,
      publicSignals: this._denormalizePublicSignals(proof.publicSignals),
    });
  }

  public async generateCalldata(proof: ProofNoInputs): Promise<Calldata> {
    return await super.generateCalldata({
      proof: proof.proof,
      publicSignals: this._denormalizePublicSignals(proof.publicSignals),
    });
  }

  public getSignalNames(): string[] {
    return ["c"];
  }

  private _normalizePublicSignals(publicSignals: PublicSignals): PublicNoInputs {
    const signalNames = this.getSignalNames();

    return signalNames.reduce((acc: any, signalName, index) => {
      acc[signalName] = publicSignals[index];
      return acc;
    }, {});
  }

  private _denormalizePublicSignals(publicSignals: PublicNoInputs): PublicSignals {
    const signalNames = this.getSignalNames();

    return signalNames.map((signalName) => (publicSignals as any)[signalName]);
  }
}

export default NoInputs;
